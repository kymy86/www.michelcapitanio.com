AWSTemplateFormatVersion: "2010-09-09"
Description: Provision my personal website on AWS
Parameters:
  WebsiteName:
    Description: Website name
    Type: String
  HostedZoneId:
    Description: Domain ID hosted zone
    Type: String
  CloudfrontHostedZoneId:
    Type: String
    Description: Hosted Zone ID for CloudFront Distribution
    Default: Z2FDTNDATAQYW2

Mappings:
  S3ToHostedZoneId:
    us-east-2:
      zoneid: Z2O1EMRO9K5GLX
    us-east-1:
      zoneid: Z3AQBSTGFYJSTF
    us-west-1	:
      zoneid: Z2F56UZL2M1ACD
    us-west-2:
      zoneid: Z3BJ6K6RIION7M
    eu-central-1:
      zoneid: Z21DNDUVLTQW6Q
    eu-west-1:
      zoneid: Z1BKCTXD74EZPE
    eu-west-2:
      zoneid: Z3GKZC51ZF0DB4
    eu-west-3:
      zoneid: Z3R1K369G5AVDG
Resources:
  
  WebsiteBucketRedirect:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref WebsiteName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Sub www.${WebsiteName}
          Protocol: https
  
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub www.${WebsiteName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      VersioningConfiguration:
        Status: Enabled
  
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowSSLRequestsOnly # AWS Foundational Security Best Practices v1.0.0 S3.5
          Effect: Deny
          Principal: '*'
          Action: 's3:*'
          Resource:
          - !GetAtt 'WebsiteBucket.Arn'
          - !Sub '${WebsiteBucket.Arn}/*'
          Condition:
            Bool:
              'aws:SecureTransport': false
        - Sid: CloudFrontOriginAccessIdentityPolicy
          Action: 's3:GetObject'
          Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Resource: !Sub '${WebsiteBucket.Arn}/*'
          Condition:
            StringEquals:
              "AWS:SourceArn": !Sub "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}"
  
  WebsiteCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref WebsiteName
      SubjectAlternativeNames:
      - !Sub www.${WebsiteName} 
      DomainValidationOptions:
      - DomainName: !Ref WebsiteName
        ValidationDomain: !Ref WebsiteName

  # CloudFront origin Access Control to expose S3 bucket through CloudFront
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: !Sub Access to ${WebsiteBucket}
        Name: !Sub ${WebsiteBucket}-origin-access-control
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  
  WebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
        - !Sub www.${WebsiteName}
        DefaultRootObject: index.html
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          TargetOriginId: !Sub S3-www.${WebsiteName}
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        Origins:
        - DomainName: !GetAtt WebsiteBucket.DomainName
          Id: !Sub S3-www.${WebsiteName}
          OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
          S3OriginConfig:
            OriginAccessIdentity: ""
        ViewerCertificate:
          AcmCertificateArn: !Ref WebsiteCertificate
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only

  WebsiteRedirectRecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn: WebsiteBucketRedirect
    Properties:
      Name: !Ref WebsiteName
      Type: A
      AliasTarget:
        DNSName: !Sub s3-website.${AWS::Region}.amazonaws.com
        HostedZoneId: !FindInMap [S3ToHostedZoneId, !Ref "AWS::Region", zoneid]
      HostedZoneId: !Ref HostedZoneId

  WebsiteRecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn: WebsiteBucket
    Properties:
      Name: !Sub www.${WebsiteName}
      Type: A
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt WebsiteDistribution.DomainName
        HostedZoneId: !Ref CloudfrontHostedZoneId

Outputs:
  Website:
    Value: !Sub https://www.${WebsiteName}



  